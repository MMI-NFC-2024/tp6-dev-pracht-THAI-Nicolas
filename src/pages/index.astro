---
import PlotFigure from "../components/PlotFigure.astro";
import Layout from "../layouts/Layout.astro";
import * as Plot from "@observablehq/plot";
import penguins from "../assets/penguins.json";
import cars from "../assets/cars.json";

const species = [...new Set(penguins.map(penguin => penguin.species))];

// Extraire les marques de voitures (premiers mots des noms)
const carBrands = [...new Set(cars.map(car => car.name.split(' ')[0]))].sort();
---

<Layout>
  <div class="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 relative overflow-hidden">
    <div class="absolute inset-0 bg-gradient-to-r from-blue-600/10 via-cyan-500/5 to-purple-600/10"></div>
    <div class="absolute top-0 right-0 w-96 h-96 bg-gradient-to-br from-cyan-400/30 to-blue-600/30 rounded-full blur-3xl"></div>
    <div class="absolute bottom-0 left-0 w-80 h-80 bg-gradient-to-tr from-indigo-500/20 to-purple-600/20 rounded-full blur-3xl"></div>
    
    <div class="relative z-10 container mx-auto px-6 py-12">
      <div class="text-center mb-12">
        <h1 class="text-5xl font-bold mb-4 bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent">
          TP-6 PRACHT R312
        </h1>
        <p class="text-xl text-blue-200/80 font-light">
          Routes et pages param√©triques
        </p>
      </div>
      
      <div class="backdrop-blur-xl bg-white/15 rounded-3xl border border-white/30 shadow-2xl p-8">
        <div class="mb-8">
          <div class="flex justify-center">
            <nav class="flex space-x-2 bg-black/20 backdrop-blur-md rounded-2xl p-2 border border-white/25">
              {species.map((specie, index) => (
                <button 
                  class={`tab-button px-6 py-3 rounded-xl font-bold text-sm transition-all duration-300 ${
                    index === 0 
                      ? 'bg-gradient-to-r from-cyan-500 to-blue-600 text-white shadow-lg shadow-blue-500/40 border border-cyan-400/30' 
                      : 'text-blue-100 hover:text-white hover:bg-black/30 hover:border hover:border-white/20'
                  }`}
                  data-tab={specie}
                >
                  {specie}
                </button>
              ))}
            </nav>
          </div>
        </div>

        <div id="charts-container">
          {species.map((specie, index) => {
            const speciesData = penguins.filter(penguin => penguin.species === specie);
            return (
              <div 
                class={`chart-panel ${index === 0 ? '' : 'hidden'}`}
                data-panel={specie}
                data-species={specie}
              >

                <div class="text-center mb-8">
                  <h2 class="text-4xl font-bold text-white mb-2 drop-shadow-lg">
                    Esp√®ce: <span class="bg-gradient-to-r from-cyan-300 to-blue-300 bg-clip-text text-transparent drop-shadow-none">{specie}</span>
                  </h2>
                  <p class="text-xl text-blue-100 font-medium drop-shadow-md" id="species-count">
                    {speciesData.length} individus analys√©s
                  </p>
                </div>
                
                <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
            
                  <div class="bg-black/20 backdrop-blur-md rounded-2xl border border-white/25 p-6 hover:bg-black/30 transition-all duration-300 shadow-lg">
                    <div class="flex items-center mb-4">
                      <div class="w-3 h-8 bg-gradient-to-b from-cyan-400 to-blue-500 rounded-full mr-3 shadow-lg shadow-cyan-500/30"></div>
                      <h3 class="text-xl font-bold text-white drop-shadow-lg">Longueur vs Profondeur du bec</h3>
                    </div>
                    <div class="chart-beak" data-chart-type="beak" data-species={specie}>
                      <PlotFigure
                        options={{
                          marks: [
                            Plot.dot(speciesData, {
                              x: "culmen_length_mm",
                              y: "culmen_depth_mm",
                              fill: "sex",
                              stroke: "island",
                              r: 4
                            }),
                          ],
                          color: {
                            legend: true
                          },
                          grid: true,
                          x: { label: "Longueur du bec (mm)" },
                          y: { label: "Profondeur du bec (mm)" },
                          style: {
                            color: "white",
                            backgroundColor: "transparent"
                          }
                        }}
                      />
                    </div>
                  </div>

                 
                  <div class="bg-black/20 backdrop-blur-md rounded-2xl border border-white/25 p-6 hover:bg-black/30 transition-all duration-300 shadow-lg">
                    <div class="flex items-center mb-4">
                      <div class="w-3 h-8 bg-gradient-to-b from-purple-400 to-indigo-500 rounded-full mr-3 shadow-lg shadow-purple-500/30"></div>
                      <h3 class="text-xl font-bold text-white drop-shadow-lg">Masse vs Longueur des nageoires</h3>
                    </div>
                    <div class="chart-body" data-chart-type="body" data-species={specie}>
                      <PlotFigure
                        options={{
                          marks: [
                            Plot.dot(speciesData, {
                              x: "flipper_length_mm",
                              y: "body_mass_g",
                              fill: "sex",
                              stroke: "island",
                              r: 4
                            }),
                          ],
                          color: {
                            legend: true
                          },
                          grid: true,
                          x: { label: "Longueur des nageoires (mm)" },
                          y: { label: "Masse corporelle (g)" },
                          style: {
                            color: "white",
                            backgroundColor: "transparent"
                          }
                        }}
                      />
                    </div>
                  </div>
                </div>

            
                <div class="mt-8 bg-black/20 backdrop-blur-md rounded-2xl border border-white/25 p-6 hover:bg-black/30 transition-all duration-300 shadow-lg">
                  <div class="flex items-center mb-4">
                    <div class="w-3 h-8 bg-gradient-to-b from-emerald-400 to-teal-500 rounded-full mr-3 shadow-lg shadow-emerald-500/30"></div>
                    <h3 class="text-xl font-bold text-white drop-shadow-lg">Distribution de la masse corporelle</h3>
                  </div>
                  <div class="chart-histogram" data-chart-type="histogram" data-species={specie}>
                    <PlotFigure
                      options={{
                        marks: [
                          Plot.rectY(speciesData, Plot.binX({y: "count"}, {
                            x: "body_mass_g",
                            fill: "sex",
                            stroke: "white"
                          })),
                        ],
                        color: {
                          legend: true
                        },
                        x: { label: "Masse corporelle (g)" },
                        y: { label: "Nombre d'individus" },
                        style: {
                          color: "white",
                          backgroundColor: "transparent"
                        }
                      }}
                    />
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      <!-- Section Voitures -->
      <div class="mt-16 backdrop-blur-xl bg-white/15 rounded-3xl border border-white/30 shadow-2xl p-8">
        <div class="text-center mb-8">
          <h2 class="text-4xl font-bold mb-4 bg-gradient-to-r from-orange-400 to-red-400 bg-clip-text text-transparent">
            üöó Analyse des Voitures
          </h2>
          <p class="text-lg text-blue-200/80 font-light">
            {cars.length} voitures analys√©es
          </p>
        </div>

        <div class="mb-8">
          <div class="flex justify-center">
            <nav class="flex flex-wrap justify-center gap-2 bg-black/20 backdrop-blur-md rounded-2xl p-2 border border-white/25 max-w-4xl">
              {carBrands.slice(0, 10).map((brand, index) => (
                <button 
                  class={`car-tab-button px-4 py-2 rounded-xl font-bold text-xs transition-all duration-300 ${
                    index === 0 
                      ? 'bg-gradient-to-r from-orange-500 to-red-600 text-white shadow-lg shadow-orange-500/40 border border-orange-400/30' 
                      : 'text-blue-100 hover:text-white hover:bg-black/30 hover:border hover:border-white/20'
                  }`}
                  data-car-tab={brand}
                >
                  {brand}
                </button>
              ))}
            </nav>
          </div>
        </div>

        <div id="cars-charts-container">
          {carBrands.slice(0, 10).map((brand, index) => {
            const brandCars = cars.filter(car => car.name.startsWith(brand));
            return (
              <div 
                class={`car-chart-panel ${index === 0 ? '' : 'hidden'}`}
                data-car-panel={brand}
                data-brand={brand}
              >
                <div class="text-center mb-8">
                  <h3 class="text-4xl font-bold text-white mb-2 drop-shadow-lg">
                    Marque: <span class="bg-gradient-to-r from-orange-300 to-red-300 bg-clip-text text-transparent drop-shadow-none">{brand}</span>
                  </h3>
                  <p class="text-xl text-blue-100 font-medium drop-shadow-md">
                    {brandCars.length} mod√®les analys√©s
                  </p>
                </div>
                
                <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
                  <!-- Graphique: Cylindres vs Puissance -->
                  <div class="bg-black/20 backdrop-blur-md rounded-2xl border border-white/25 p-6 hover:bg-black/30 transition-all duration-300 shadow-lg">
                    <div class="flex items-center mb-4">
                      <div class="w-3 h-8 bg-gradient-to-b from-orange-400 to-red-500 rounded-full mr-3 shadow-lg shadow-orange-500/30"></div>
                      <h4 class="text-xl font-bold text-white drop-shadow-lg">Cylindres vs Puissance</h4>
                    </div>
                    <PlotFigure
                      options={{
                        marks: [
                          Plot.dot(brandCars, {
                            x: "cylinders",
                            y: "power (hp)",
                            fill: "year",
                            r: 5
                          }),
                        ],
                        grid: true,
                        x: { label: "Nombre de cylindres" },
                        y: { label: "Puissance (hp)" },
                        style: {
                          color: "white",
                          backgroundColor: "transparent"
                        }
                      }}
                    />
                  </div>

                  <!-- Graphique: Poids vs Consommation -->
                  <div class="bg-black/20 backdrop-blur-md rounded-2xl border border-white/25 p-6 hover:bg-black/30 transition-all duration-300 shadow-lg">
                    <div class="flex items-center mb-4">
                      <div class="w-3 h-8 bg-gradient-to-b from-yellow-400 to-orange-500 rounded-full mr-3 shadow-lg shadow-yellow-500/30"></div>
                      <h4 class="text-xl font-bold text-white drop-shadow-lg">Poids vs Consommation</h4>
                    </div>
                    <PlotFigure
                      options={{
                        marks: [
                          Plot.dot(brandCars, {
                            x: "weight (lb)",
                            y: "economy (mpg)",
                            fill: "cylinders",
                            r: 5
                          }),
                        ],
                        grid: true,
                        x: { label: "Poids (lb)" },
                        y: { label: "√âconomie (mpg)" },
                        style: {
                          color: "white",
                          backgroundColor: "transparent"
                        }
                      }}
                    />
                  </div>
                </div>

                <!-- Graphique: Distribution de la puissance -->
                <div class="mt-8 bg-black/20 backdrop-blur-md rounded-2xl border border-white/25 p-6 hover:bg-black/30 transition-all duration-300 shadow-lg">
                  <div class="flex items-center mb-4">
                    <div class="w-3 h-8 bg-gradient-to-b from-red-400 to-pink-500 rounded-full mr-3 shadow-lg shadow-red-500/30"></div>
                    <h4 class="text-xl font-bold text-white drop-shadow-lg">Distribution de la puissance</h4>
                  </div>
                  <PlotFigure
                    options={{
                      marks: [
                        Plot.rectY(brandCars, Plot.binX({y: "count"}, {
                          x: "power (hp)",
                          fill: "steelblue",
                          stroke: "white"
                        })),
                      ],
                      x: { label: "Puissance (hp)" },
                      y: { label: "Nombre de mod√®les" },
                      style: {
                        color: "white",
                        backgroundColor: "transparent"
                      }
                    }}
                  />
                </div>
              </div>
            );
          })}
        </div>
      </div>

    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Gestion des onglets Penguins
      const tabButtons = document.querySelectorAll('.tab-button');
      const chartPanels = document.querySelectorAll('.chart-panel');

      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const targetTab = this.getAttribute('data-tab');
          
          tabButtons.forEach(btn => {
            btn.classList.remove('bg-gradient-to-r', 'from-cyan-500', 'to-blue-600', 'text-white', 'shadow-lg', 'shadow-blue-500/40', 'border', 'border-cyan-400/30');
            btn.classList.add('text-blue-100');
          });
          
          this.classList.remove('text-blue-100');
          this.classList.add('bg-gradient-to-r', 'from-cyan-500', 'to-blue-600', 'text-white', 'shadow-lg', 'shadow-blue-500/40', 'border', 'border-cyan-400/30');
          
          chartPanels.forEach(panel => {
            panel.classList.add('hidden');
          });
          
          const targetPanel = document.querySelector(`[data-panel="${targetTab}"]`);
          if (targetPanel) {
            targetPanel.classList.remove('hidden');
          }
        });
      });

      // Gestion des onglets Cars
      const carTabButtons = document.querySelectorAll('.car-tab-button');
      const carChartPanels = document.querySelectorAll('.car-chart-panel');

      carTabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const targetTab = this.getAttribute('data-car-tab');
          
          carTabButtons.forEach(btn => {
            btn.classList.remove('bg-gradient-to-r', 'from-orange-500', 'to-red-600', 'text-white', 'shadow-lg', 'shadow-orange-500/40', 'border', 'border-orange-400/30');
            btn.classList.add('text-blue-100');
          });
          
          this.classList.remove('text-blue-100');
          this.classList.add('bg-gradient-to-r', 'from-orange-500', 'to-red-600', 'text-white', 'shadow-lg', 'shadow-orange-500/40', 'border', 'border-orange-400/30');
          
          carChartPanels.forEach(panel => {
            panel.classList.add('hidden');
          });
          
          const targetPanel = document.querySelector(`[data-car-panel="${targetTab}"]`);
          if (targetPanel) {
            targetPanel.classList.remove('hidden');
          }
        });
      });
    });
  </script>
</Layout>
